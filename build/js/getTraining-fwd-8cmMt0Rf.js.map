{"version":3,"file":"getTraining-fwd-8cmMt0Rf.js","sources":["../../src/store/slice/page/training/action/getTraining.ts"],"sourcesContent":["import { Dispatch } from \"@reduxjs/toolkit\";\nimport API from \"../../../../../helper/API\";\nimport request from \"axios\";\nimport { setSnackbar } from \"../../../components/reducer/snackbar\";\nimport { ErrorResposeType } from \"../../../../../helper/useHttp\";\nimport { setTrainingDetailData, setTrainingDetailLoading } from \"../reducer\";\nimport { TrainingDetailReducerInterface } from \"../interface/PageTrainingReducerInterface.interface\";\n\ntype GetTrainingParamType = {\n  id: string;\n  successCB?: (data: TrainingDetailReducerInterface) => void;\n  failedCB?: () => void;\n};\n\nexport const getTraining =\n  (param: GetTrainingParamType) => async (dispatch: Dispatch) => {\n    try {\n      const { id = \"\" } = param;\n      await new Promise((resolve) => setTimeout(resolve, 500));\n\n      const response = await API({\n        method: \"post\",\n        url: `/v1/trainings/current`,\n        payload: {\n          id,\n        },\n      });\n\n      console.log(\"response\", { response, param });\n      dispatch(\n        setTrainingDetailData({\n          data: response.data.data,\n        })\n      );\n      dispatch(setTrainingDetailLoading({ loading: false }));\n      return param.successCB && param.successCB(response.data.data);\n      // return param.successCB(\n      //   response?.data?.data || {\n      //     id: \"\",\n      //     name: \"\",\n      //     createdAt: \"\",\n      //     startDate: \"\",\n      //     endDate: \"\",\n      //     objective: \"\",\n      //     duration: \"\",\n      //     createdBy: {\n      //       id: \"\",\n      //       name: \"\",\n      //       departement: {\n      //         id: \"\",\n      //         name: \"\",\n      //       },\n      //     },\n      //     budget: {\n      //       name: \"\",\n      //       id: \"\",\n      //       code: \"\",\n      //       cost: \"\",\n      //       requestBy: {\n      //         id: \"\",\n      //         name: \"\",\n      //         createdAt: \"\",\n      //       },\n      //     },\n      //     trainingType: {\n      //       id: \"\",\n      //       name: \"\",\n      //     },\n      //     participants: [],\n      //     payments: [],\n      //   }\n      // );\n    } catch (error) {\n      if (request.isAxiosError(error) && error.response) {\n        console.log(\"errr\", (error.response?.data as ErrorResposeType).error);\n        dispatch(\n          setSnackbar({\n            open: true,\n            autoHideDuration: 3000,\n            severity: \"warning\",\n            message: error.message,\n          })\n        );\n      }\n      return param.failedCB && param.failedCB();\n    }\n  };\n"],"names":["getTraining","param","async","dispatch","id","Promise","resolve","setTimeout","response","API","method","url","payload","console","log","setTrainingDetailData","data","setTrainingDetailLoading","loading","successCB","error","request","isAxiosError","_a","setSnackbar","open","autoHideDuration","severity","message","failedCB"],"mappings":"0GAcO,MAAMA,EACVC,GAAgCC,MAAOC,UAClC,IACI,MAAAC,GAAEA,EAAK,IAAOH,QACd,IAAII,SAASC,GAAYC,WAAWD,EAAS,OAE7C,MAAAE,QAAiBC,EAAI,CACzBC,OAAQ,OACRC,IAAK,wBACLC,QAAS,CACPR,QAWJ,OAPAS,QAAQC,IAAI,WAAY,CAAEN,WAAUP,UACpCE,EACEY,EAAsB,CACpBC,KAAMR,EAASQ,KAAKA,QAGxBb,EAASc,EAAyB,CAAEC,SAAS,KACtCjB,EAAMkB,WAAalB,EAAMkB,UAAUX,EAASQ,KAAKA,YAqCjDI,GAYA,OAXHC,EAAQC,aAAaF,IAAUA,EAAMZ,WACvCK,QAAQC,IAAI,QAAS,OAAAS,EAAAH,EAAMZ,eAAN,EAAAe,EAAgBP,MAA0BI,OAC/DjB,EACEqB,EAAY,CACVC,MAAM,EACNC,iBAAkB,IAClBC,SAAU,UACVC,QAASR,EAAMQ,YAId3B,EAAM4B,UAAY5B,EAAM4B,UACjC"}