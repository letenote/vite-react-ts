{"version":3,"file":"VendorFilter-fwd-thiJFAmo.js","sources":["../../src/containers/Vendor/child/schema/VendorFormFilterSchema.schema.ts","../../src/containers/Vendor/child/VendorFilter.tsx"],"sourcesContent":["import { ComponentFormType } from '../../../../components/Forms/enum/ComponentFormType.enum';\nimport { VendorFormFilterType } from '../type/VendorFormFilterType.type';\n\nexport const VendorFormFilterSchema: VendorFormFilterType = {\n  name: {\n    id: 'name',\n    name: 'name',\n    fullWidth: true,\n    label: 'Name',\n    placeholder: 'Name',\n    required: false,\n    errorMessage: 'name required',\n    value: '',\n    disabled: false,\n    type: 'text',\n    componentType: ComponentFormType.INPUT_TEXT,\n    autoFocus: false,\n    autoComplete: '',\n    validate: {\n      pattern: {\n        value: /^/,\n        message: '',\n      },\n    },\n    options: [],\n  },\n  status: {\n    id: 'status',\n    name: 'status',\n    fullWidth: true,\n    label: 'Status',\n    placeholder: 'Status',\n    required: false,\n    errorMessage: 'Status required',\n    value: 'All',\n    disabled: false,\n    type: 'select',\n    componentType: ComponentFormType.INPUT_DROPDOWN,\n    autoFocus: false,\n    autoComplete: '',\n    validate: {\n      pattern: {\n        value: /^/,\n        message: '',\n      },\n    },\n    options: [\n      { value: 'All', label: 'All' },\n      { value: 'Active', label: 'Active' },\n      { value: 'Inactive', label: 'Inactive' },\n    ],\n  },\n  type: {\n    id: 'type',\n    name: 'type',\n    fullWidth: true,\n    label: 'Type',\n    placeholder: 'Type',\n    required: false,\n    errorMessage: 'type required',\n    value: 'All',\n    disabled: false,\n    type: 'select',\n    componentType: ComponentFormType.INPUT_DROPDOWN,\n    autoFocus: false,\n    autoComplete: '',\n    validate: {\n      pattern: {\n        value: /^/,\n        message: '',\n      },\n    },\n    options: [{ value: 'All', label: 'All' }],\n  },\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport TextField from '@mui/material/TextField';\nimport { ComponentFormType } from '../../../components/Forms/enum/ComponentFormType.enum';\nimport SelectForm from '../../../components/Forms/SelectForm';\nimport { useAppDispatch, useAppSelector } from '../../../store';\nimport { useLocation } from 'react-router-dom';\nimport { VendorFormFilterType } from './type/VendorFormFilterType.type';\nimport { getSelectInputOptions } from '../../../store/slice/components/actions/getSelectInputOptions';\nimport { SelectInputDialogType } from '../../../components/SelectInputDialog/enum/SelectInputDialogType.type';\nimport { VendorFormFilterSchema } from './schema/VendorFormFilterSchema.schema';\nimport { getVendors } from '../../../store/slice/page/vendor/action/getVendors';\n\nconst VendorFilter = () => {\n  const dispatch = useAppDispatch();\n  const location = useLocation();\n  const query = new URLSearchParams(location.search);\n  const page = parseInt(query.get('page') || '1', 10);\n  const { selectInputOptions } = useAppSelector((state) => state.components);\n  const defaultValues: VendorFormFilterType = JSON.parse(\n    JSON.stringify(VendorFormFilterSchema)\n  );\n  const form = useForm<VendorFormFilterType>({\n    defaultValues: async () => {\n      if (\n        selectInputOptions.vendorType.loading &&\n        selectInputOptions.vendorType.list.length === 0\n      ) {\n        await dispatch(\n          getSelectInputOptions({ type: SelectInputDialogType.VENDOR_TYPE })\n        );\n      }\n\n      return defaultValues;\n    },\n  });\n  const { register, formState, handleSubmit, control } = form;\n  const { errors } = formState;\n\n  const onValid = (data: VendorFormFilterType) => {\n    dispatch(\n      getVendors({\n        page,\n        vendorTypeId: data.type.value.toString(),\n        status: data.status.value.toString(),\n        name: data.name.value.toString(),\n      })\n    );\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        mb: 3,\n        display: 'grid',\n        gridTemplateColumns: { sm: '1fr 0.4fr 1fr 0.4fr' },\n        gap: 2,\n      }}\n      noValidate\n      autoComplete=\"off\"\n      onSubmit={handleSubmit(onValid)}\n    >\n      {Object.keys(defaultValues).map((field) => {\n        const _getField = field as keyof typeof defaultValues;\n        const _registerField = `${defaultValues[_getField].id}.value` as any;\n        switch (defaultValues[_getField].componentType) {\n          case ComponentFormType.INPUT_DROPDOWN:\n            return (\n              <SelectForm\n                key={_getField}\n                name={defaultValues[_getField].name}\n                registerField={_registerField}\n                id={defaultValues[_getField].id}\n                label={defaultValues[_getField].label.toString()}\n                required={defaultValues[_getField].required}\n                control={control}\n                error={false}\n                helperText={defaultValues[_getField].errorMessage}\n                value={defaultValues[_getField].value.toString()}\n                style={{\n                  marginLeft: 0,\n                  width: '100%',\n                  marginBottom: 0,\n                  marginTop: 0,\n                  backgroundColorLabel: '#f5f5f5',\n                }}\n                options={\n                  defaultValues[_getField].id === 'status'\n                    ? defaultValues[_getField].options\n                    : [\n                        ...defaultValues[_getField].options,\n                        ...selectInputOptions.vendorType.list.map(\n                          (vendorType) => {\n                            return {\n                              value: vendorType.id,\n                              label: vendorType.name,\n                            };\n                          }\n                        ),\n                      ]\n                }\n                disabled={defaultValues[_getField].disabled}\n              />\n            );\n          default:\n            return (\n              <TextField\n                sx={{ mt: 0, mb: 0 }}\n                key={_getField}\n                margin=\"normal\"\n                fullWidth={defaultValues[_getField].fullWidth}\n                label={defaultValues[_getField].label.toString()}\n                type={defaultValues[_getField].type}\n                autoFocus={defaultValues[_getField].autoFocus}\n                autoComplete={defaultValues[_getField].autoComplete}\n                {...register(_registerField, {\n                  required: {\n                    value: defaultValues[_getField].required,\n                    message: defaultValues[_getField].errorMessage,\n                  },\n                  disabled: defaultValues[_getField].disabled,\n                  pattern: {\n                    value: defaultValues[_getField].validate.pattern.value,\n                    message: defaultValues[_getField].validate.pattern.message,\n                  },\n                })}\n                error={!!errors[_getField]}\n                helperText={errors[_getField]?.value?.message}\n              />\n            );\n        }\n      })}\n      <LoadingButton\n        fullWidth\n        type=\"submit\"\n        loading={false}\n        disabled={false}\n        variant=\"contained\"\n        size=\"large\"\n        sx={{ mt: 0, mb: 0 }}\n      >\n        <Typography variant=\"button\" display=\"block\" gutterBottom>\n          Search\n        </Typography>\n      </LoadingButton>\n    </Box>\n  );\n};\n\nconst MemoizedVendorFilter = React.memo(\n  VendorFilter,\n  (prevProps, nextProps) => {\n    return JSON.stringify(prevProps) === JSON.stringify(nextProps);\n  }\n);\n\nexport default MemoizedVendorFilter;\n"],"names":["VendorFormFilterSchema","name","id","fullWidth","label","placeholder","required","errorMessage","value","disabled","type","componentType","ComponentFormType","INPUT_TEXT","autoFocus","autoComplete","validate","pattern","message","options","status","INPUT_DROPDOWN","MemoizedVendorFilter","React","memo","dispatch","useAppDispatch","location","useLocation","query","URLSearchParams","search","page","parseInt","get","selectInputOptions","useAppSelector","state","components","defaultValues","JSON","parse","stringify","form","useForm","async","vendorType","loading","list","length","getSelectInputOptions","SelectInputDialogType","VENDOR_TYPE","register","formState","handleSubmit","control","errors","jsxRuntimeExports","jsxs","Box","component","sx","mb","display","gridTemplateColumns","sm","gap","noValidate","onSubmit","data","getVendors","vendorTypeId","toString","children","Object","keys","map","field","_getField","_registerField","jsx","SelectForm","registerField","error","helperText","style","marginLeft","width","marginBottom","marginTop","backgroundColorLabel","TextField","mt","margin","_b","_a","LoadingButton","variant","size","Typography","gutterBottom","prevProps","nextProps"],"mappings":"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"}