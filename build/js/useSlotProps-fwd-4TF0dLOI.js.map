{"version":3,"file":"useSlotProps-fwd-4TF0dLOI.js","sources":["../../node_modules/@mui/base/utils/isHostComponent.js","../../node_modules/@mui/base/utils/extractEventHandlers.js","../../node_modules/@mui/base/utils/resolveComponentProps.js","../../node_modules/@mui/base/utils/omitEventHandlers.js","../../node_modules/@mui/base/utils/useSlotProps.js","../../node_modules/@mui/base/utils/mergeSlotProps.js","../../node_modules/@mui/base/utils/appendOwnerState.js"],"sourcesContent":["/**\n * Determines if a given element is a DOM element name (i.e. not a React component).\n */\nexport function isHostComponent(element) {\n  return typeof element === 'string';\n}","/**\n * Extracts event handlers from a given object.\n * A prop is considered an event handler if it is a function and its name starts with `on`.\n *\n * @param object An object to extract event handlers from.\n * @param excludeKeys An array of keys to exclude from the returned object.\n */\nexport function extractEventHandlers(object, excludeKeys = []) {\n  if (object === undefined) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {\n    result[prop] = object[prop];\n  });\n  return result;\n}","/**\n * If `componentProps` is a function, calls it with the provided `ownerState`.\n * Otherwise, just returns `componentProps`.\n */\nexport function resolveComponentProps(componentProps, ownerState, slotState) {\n  if (typeof componentProps === 'function') {\n    return componentProps(ownerState, slotState);\n  }\n  return componentProps;\n}","/**\n * Removes event handlers from the given object.\n * A field is considered an event handler if it is a function with a name beginning with `on`.\n *\n * @param object Object to remove event handlers from.\n * @returns Object with event handlers removed.\n */\nexport function omitEventHandlers(object) {\n  if (object === undefined) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter(prop => !(prop.match(/^on[A-Z]/) && typeof object[prop] === 'function')).forEach(prop => {\n    result[prop] = object[prop];\n  });\n  return result;\n}","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"elementType\", \"externalSlotProps\", \"ownerState\", \"skipResolvingSlotProps\"];\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { appendOwnerState } from './appendOwnerState';\nimport { mergeSlotProps } from './mergeSlotProps';\nimport { resolveComponentProps } from './resolveComponentProps';\n/**\n * @ignore - do not document.\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\nexport function useSlotProps(parameters) {\n  var _parameters$additiona;\n  const {\n      elementType,\n      externalSlotProps,\n      ownerState,\n      skipResolvingSlotProps = false\n    } = parameters,\n    rest = _objectWithoutPropertiesLoose(parameters, _excluded);\n  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);\n  const {\n    props: mergedProps,\n    internalRef\n  } = mergeSlotProps(_extends({}, rest, {\n    externalSlotProps: resolvedComponentsProps\n  }));\n  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);\n  const props = appendOwnerState(elementType, _extends({}, mergedProps, {\n    ref\n  }), ownerState);\n  return props;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport clsx from 'clsx';\nimport { extractEventHandlers } from './extractEventHandlers';\nimport { omitEventHandlers } from './omitEventHandlers';\n/**\n * Merges the slot component internal props (usually coming from a hook)\n * with the externally provided ones.\n *\n * The merge order is (the latter overrides the former):\n * 1. The internal props (specified as a getter function to work with get*Props hook result)\n * 2. Additional props (specified internally on a Base UI component)\n * 3. External props specified on the owner component. These should only be used on a root slot.\n * 4. External props specified in the `slotProps.*` prop.\n * 5. The `className` prop - combined from all the above.\n * @param parameters\n * @returns\n */\nexport function mergeSlotProps(parameters) {\n  const {\n    getSlotProps,\n    additionalProps,\n    externalSlotProps,\n    externalForwardedProps,\n    className\n  } = parameters;\n  if (!getSlotProps) {\n    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,\n    // so we can simply merge all the props without having to worry about extracting event handlers.\n    const joinedClasses = clsx(additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);\n    const mergedStyle = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);\n    const props = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);\n    if (joinedClasses.length > 0) {\n      props.className = joinedClasses;\n    }\n    if (Object.keys(mergedStyle).length > 0) {\n      props.style = mergedStyle;\n    }\n    return {\n      props,\n      internalRef: undefined\n    };\n  }\n\n  // In this case, getSlotProps is responsible for calling the external event handlers.\n  // We don't need to include them in the merged props because of this.\n\n  const eventHandlers = extractEventHandlers(_extends({}, externalForwardedProps, externalSlotProps));\n  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);\n  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);\n  const internalSlotProps = getSlotProps(eventHandlers);\n\n  // The order of classes is important here.\n  // Emotion (that we use in libraries consuming Base UI) depends on this order\n  // to properly override style. It requires the most important classes to be last\n  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.\n  const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);\n  const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);\n  const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);\n  if (joinedClasses.length > 0) {\n    props.className = joinedClasses;\n  }\n  if (Object.keys(mergedStyle).length > 0) {\n    props.style = mergedStyle;\n  }\n  return {\n    props,\n    internalRef: internalSlotProps.ref\n  };\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { isHostComponent } from './isHostComponent';\n\n/**\n * Type of the ownerState based on the type of an element it applies to.\n * This resolves to the provided OwnerState for React components and `undefined` for host components.\n * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.\n */\n\n/**\n * Appends the ownerState object to the props, merging with the existing one if necessary.\n *\n * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.\n * @param otherProps Props of the element.\n * @param ownerState\n */\nexport function appendOwnerState(elementType, otherProps, ownerState) {\n  if (elementType === undefined || isHostComponent(elementType)) {\n    return otherProps;\n  }\n  return _extends({}, otherProps, {\n    ownerState: _extends({}, otherProps.ownerState, ownerState)\n  });\n}"],"names":["isHostComponent","element","extractEventHandlers","object","excludeKeys","result","Object","keys","filter","prop","match","includes","forEach","resolveComponentProps","componentProps","ownerState","slotState","omitEventHandlers","_excluded","useSlotProps","parameters","_parameters$additiona","elementType","externalSlotProps","skipResolvingSlotProps","rest","_objectWithoutPropertiesLoose","resolvedComponentsProps","props","mergedProps","internalRef","getSlotProps","additionalProps","externalForwardedProps","className","joinedClasses","clsx","mergedStyle","_extends","style","length","eventHandlers","componentsPropsWithoutEventHandlers","otherPropsWithoutEventHandlers","internalSlotProps","ref","mergeSlotProps","useForkRef","otherProps","appendOwnerState"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}