{"version":3,"file":"getSelectInputOptions-fwd-ZVToRqqx.js","sources":["../../src/components/SelectInputDialog/helper/selectInputDialogTypeGenerate.ts","../../src/store/slice/components/actions/getSelectInputOptions.ts"],"sourcesContent":["import { selectInputOptionsInterface } from '../../../store/slice/components/interface/selectInputOptionsInterface.interface';\nimport { SelectInputDialogType } from '../enum/SelectInputDialogType.type';\nimport { SelectInputDialogTypes } from '../type/SelectInputDialogTypes.type';\n\nexport const selectInputDialogTypeGenerate = (\n  type: SelectInputDialogTypes\n): keyof selectInputOptionsInterface => {\n  switch (type) {\n    case SelectInputDialogType.DEPARTEMENT:\n      return 'departement';\n    case SelectInputDialogType.DIVISION:\n      return 'division';\n    case SelectInputDialogType.LEVEL:\n      return 'level';\n    case SelectInputDialogType.POSITION:\n      return 'position';\n    case SelectInputDialogType.ROLE:\n      return 'role';\n    case SelectInputDialogType.VENDOR_TYPE:\n      return 'vendorType';\n    case SelectInputDialogType.TRAINING_TYPE:\n      return 'trainingType';\n  }\n};\n","import { Dispatch } from '@reduxjs/toolkit';\nimport API from '../../../../helper/API';\nimport { SelectInputDialogTypes } from '../../../../components/SelectInputDialog/type/SelectInputDialogTypes.type';\nimport { selectInputDialogTypeGenerate } from '../../../../components/SelectInputDialog/helper/selectInputDialogTypeGenerate';\nimport {\n  setSelectInputOptions,\n  setSelectInputOptionsLading,\n} from '../reducer/selectInputOptions';\nimport { setSnackbar } from '../reducer/snackbar';\nimport request from 'axios';\nimport { ErrorResposeType } from '../../../../helper/useHttp';\nimport { selectInputOptionsInterface } from '../interface/selectInputOptionsInterface.interface';\n\ntype getSelectInputOptionsType = {\n  type: SelectInputDialogTypes;\n};\n\nexport const getSelectInputOptions =\n  (param: getSelectInputOptionsType) => async (dispatch: Dispatch) => {\n    try {\n      const _isSelectInputDialogType = selectInputDialogTypeGenerate(\n        param.type\n      );\n      const response = await API({\n        method: 'post',\n        url: urlGetSelectInputOptionsGenerate(_isSelectInputDialogType),\n        payload: { page: 0 },\n      });\n      console.log('getSelectInputOptions:', { param, response });\n      dispatch(\n        setSelectInputOptions({\n          type: _isSelectInputDialogType,\n          list: response.data.data[`${_isSelectInputDialogType}s`],\n        })\n      );\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      dispatch(\n        setSelectInputOptionsLading({\n          type: _isSelectInputDialogType,\n          loading: false,\n        })\n      );\n    } catch (error) {\n      if (request.isAxiosError(error) && error.response) {\n        console.log('errr', (error.response?.data as ErrorResposeType).error);\n        dispatch(\n          setSnackbar({\n            open: true,\n            autoHideDuration: 3000,\n            severity: 'warning',\n            message: error.response?.data.message ?? error.message ?? '',\n          })\n        );\n\n        dispatch(\n          setSelectInputOptionsLading({\n            type: selectInputDialogTypeGenerate(param.type),\n            loading: false,\n          })\n        );\n      }\n    }\n  };\n\nconst urlGetSelectInputOptionsGenerate = (\n  _isSelectInputDialogType: keyof selectInputOptionsInterface\n): string => {\n  switch (_isSelectInputDialogType) {\n    case 'trainingType':\n      return `/v1/trainings/types`;\n    case 'vendorType':\n      return `/v1/vendors/types`;\n    default:\n      return `/v1/users/${_isSelectInputDialogType}s`;\n  }\n};\n"],"names":["selectInputDialogTypeGenerate","type","SelectInputDialogType","DEPARTEMENT","DIVISION","LEVEL","POSITION","ROLE","VENDOR_TYPE","TRAINING_TYPE","getSelectInputOptions","param","async","dispatch","_isSelectInputDialogType","response","API","method","url","urlGetSelectInputOptionsGenerate","payload","page","console","log","setSelectInputOptions","list","data","Promise","resolve","setTimeout","setSelectInputOptionsLading","loading","error","request","isAxiosError","_a","setSnackbar","open","autoHideDuration","severity","message","_b"],"mappings":"2KAIa,MAAAA,EACXC,IAEA,OAAQA,GACN,KAAKC,EAAsBC,YAClB,MAAA,cACT,KAAKD,EAAsBE,SAClB,MAAA,WACT,KAAKF,EAAsBG,MAClB,MAAA,QACT,KAAKH,EAAsBI,SAClB,MAAA,WACT,KAAKJ,EAAsBK,KAClB,MAAA,OACT,KAAKL,EAAsBM,YAClB,MAAA,aACT,KAAKN,EAAsBO,cAClB,MAAA,eACX,ECLWC,EACVC,GAAqCC,MAAOC,YACvC,IACF,MAAMC,EAA2Bd,EAC/BW,EAAMV,MAEFc,QAAiBC,EAAI,CACzBC,OAAQ,OACRC,IAAKC,EAAiCL,GACtCM,QAAS,CAAEC,KAAM,KAEnBC,QAAQC,IAAI,yBAA0B,CAAEZ,QAAOI,aAC/CF,EACEW,EAAsB,CACpBvB,KAAMa,EACNW,KAAMV,EAASW,KAAKA,KAAK,GAAGZ,eAG1B,IAAIa,SAASC,GAAYC,WAAWD,EAAS,OACnDf,EACEiB,EAA4B,CAC1B7B,KAAMa,EACNiB,SAAS,WAGNC,GACHC,EAAQC,aAAaF,IAAUA,EAAMjB,WACvCO,QAAQC,IAAI,QAAS,OAAAY,EAAAH,EAAMjB,eAAN,EAAAoB,EAAgBT,MAA0BM,OAC/DnB,EACEuB,EAAY,CACVC,MAAM,EACNC,iBAAkB,IAClBC,SAAU,UACVC,SAAS,OAAAC,EAAMT,EAAAjB,mBAAUW,KAAKc,UAAWR,EAAMQ,SAAW,MAI9D3B,EACEiB,EAA4B,CAC1B7B,KAAMD,EAA8BW,EAAMV,MAC1C8B,SAAS,KAIjB,GAGEZ,EACJL,IAEA,OAAQA,GACN,IAAK,eACI,MAAA,sBACT,IAAK,aACI,MAAA,oBACT,QACE,MAAO,aAAaA,KACxB"}