{"version":3,"file":"UserFilter-fwd-crUb0Cwg.js","sources":["../../src/containers/User/child/schema/UserFormsFilterSchema.schema.ts","../../src/containers/User/child/UserFilter.tsx"],"sourcesContent":["import { ComponentFormType } from '../../../../components/Forms/enum/ComponentFormType.enum';\nimport { UserFormsFilterType } from '../type/UserFormsFilterType.type';\n\nexport const UserFormsFilterSchema: UserFormsFilterType = {\n  name: {\n    id: 'name',\n    name: 'name',\n    fullWidth: true,\n    label: 'Name',\n    placeholder: 'Name',\n    required: false,\n    errorMessage: 'name required',\n    value: '',\n    disabled: false,\n    type: 'text',\n    componentType: ComponentFormType.INPUT_TEXT,\n    autoFocus: false,\n    autoComplete: '',\n    validate: {\n      pattern: {\n        value: /^/,\n        message: '',\n      },\n    },\n    options: [],\n  },\n  status: {\n    id: 'status',\n    name: 'status',\n    fullWidth: true,\n    label: 'Status',\n    placeholder: 'Status',\n    required: false,\n    errorMessage: 'Status required',\n    value: 'All',\n    disabled: false,\n    type: 'select',\n    componentType: ComponentFormType.INPUT_DROPDOWN,\n    autoFocus: false,\n    autoComplete: '',\n    validate: {\n      pattern: {\n        value: /^/,\n        message: '',\n      },\n    },\n    options: [\n      { value: 'All', label: 'All' },\n      { value: 'Active', label: 'Active' },\n      { value: 'Inactive', label: 'Inactive' },\n    ],\n  },\n  departement: {\n    id: 'departement',\n    name: 'departement',\n    fullWidth: true,\n    label: 'Departement',\n    placeholder: 'Departement',\n    required: false,\n    errorMessage: 'departement required',\n    value: 'All',\n    disabled: false,\n    type: 'select',\n    componentType: ComponentFormType.INPUT_DROPDOWN,\n    autoFocus: false,\n    autoComplete: '',\n    validate: {\n      pattern: {\n        value: /^/,\n        message: '',\n      },\n    },\n    options: [{ value: 'All', label: 'All' }],\n  },\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport TextField from '@mui/material/TextField';\nimport { ComponentFormType } from '../../../components/Forms/enum/ComponentFormType.enum';\nimport SelectForm from '../../../components/Forms/SelectForm';\nimport { useAppDispatch, useAppSelector } from '../../../store';\nimport { useLocation } from 'react-router-dom';\nimport { UserFormsFilterSchema } from './schema/UserFormsFilterSchema.schema';\nimport { UserFormsFilterType } from './type/UserFormsFilterType.type';\nimport { getSelectInputOptions } from '../../../store/slice/components/actions/getSelectInputOptions';\nimport { SelectInputDialogType } from '../../../components/SelectInputDialog/enum/SelectInputDialogType.type';\nimport { getUsers } from '../../../store/slice/page/user/action/getUsers';\n\nconst UserFilter = () => {\n  const dispatch = useAppDispatch();\n  const location = useLocation();\n  const query = new URLSearchParams(location.search);\n  const page = parseInt(query.get('page') || '1', 10);\n  const { selectInputOptions } = useAppSelector((state) => state.components);\n  const defaultValues: UserFormsFilterType = JSON.parse(\n    JSON.stringify(UserFormsFilterSchema)\n  );\n  const form = useForm<UserFormsFilterType>({\n    defaultValues: async () => {\n      if (\n        selectInputOptions.departement.loading &&\n        selectInputOptions.departement.list.length === 0\n      ) {\n        await dispatch(\n          getSelectInputOptions({ type: SelectInputDialogType.DEPARTEMENT })\n        );\n      }\n\n      return defaultValues;\n    },\n  });\n  const { register, formState, handleSubmit, control } = form;\n  const { errors } = formState;\n\n  const onValid = (data: UserFormsFilterType) => {\n    dispatch(\n      getUsers({\n        page,\n        departementId: data.departement.value.toString(),\n        status: data.status.value.toString(),\n        name: data.name.value.toString(),\n      })\n    );\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        mb: 3,\n        display: 'grid',\n        gridTemplateColumns: { sm: '1fr 0.4fr 1fr 0.4fr' },\n        gap: 2,\n      }}\n      noValidate\n      autoComplete=\"off\"\n      onSubmit={handleSubmit(onValid)}\n    >\n      {Object.keys(defaultValues).map((field) => {\n        const _getField = field as keyof typeof defaultValues;\n        const _registerField = `${defaultValues[_getField].id}.value` as any;\n        switch (defaultValues[_getField].componentType) {\n          case ComponentFormType.INPUT_DROPDOWN:\n            return (\n              <SelectForm\n                key={_getField}\n                name={defaultValues[_getField].name}\n                registerField={_registerField}\n                id={defaultValues[_getField].id}\n                label={defaultValues[_getField].label.toString()}\n                required={defaultValues[_getField].required}\n                control={control}\n                error={false}\n                helperText={defaultValues[_getField].errorMessage}\n                value={defaultValues[_getField].value.toString()}\n                style={{\n                  marginLeft: 0,\n                  width: '100%',\n                  marginBottom: 0,\n                  marginTop: 0,\n                  backgroundColorLabel: '#f5f5f5',\n                }}\n                options={\n                  defaultValues[_getField].id === 'status'\n                    ? defaultValues[_getField].options\n                    : [\n                        ...defaultValues[_getField].options,\n                        ...selectInputOptions.departement.list.map(\n                          (departement) => {\n                            return {\n                              value: departement.id,\n                              label: departement.name,\n                            };\n                          }\n                        ),\n                      ]\n                }\n                disabled={defaultValues[_getField].disabled}\n              />\n            );\n          default:\n            return (\n              <TextField\n                sx={{ mt: 0, mb: 0 }}\n                key={_getField}\n                margin=\"normal\"\n                fullWidth={defaultValues[_getField].fullWidth}\n                label={defaultValues[_getField].label.toString()}\n                type={defaultValues[_getField].type}\n                autoFocus={defaultValues[_getField].autoFocus}\n                autoComplete={defaultValues[_getField].autoComplete}\n                {...register(_registerField, {\n                  required: {\n                    value: defaultValues[_getField].required,\n                    message: defaultValues[_getField].errorMessage,\n                  },\n                  disabled: defaultValues[_getField].disabled,\n                  pattern: {\n                    value: defaultValues[_getField].validate.pattern.value,\n                    message: defaultValues[_getField].validate.pattern.message,\n                  },\n                })}\n                error={!!errors[_getField]}\n                helperText={errors[_getField]?.value?.message}\n              />\n            );\n        }\n      })}\n      <LoadingButton\n        fullWidth\n        type=\"submit\"\n        loading={false}\n        disabled={false}\n        variant=\"contained\"\n        size=\"large\"\n        sx={{ mt: 0, mb: 0 }}\n      >\n        <Typography variant=\"button\" display=\"block\" gutterBottom>\n          Search\n        </Typography>\n      </LoadingButton>\n    </Box>\n  );\n};\n\nconst MemoizedUserFilter = React.memo(UserFilter, (prevProps, nextProps) => {\n  return JSON.stringify(prevProps) === JSON.stringify(nextProps);\n});\n\nexport default MemoizedUserFilter;\n"],"names":["UserFormsFilterSchema","name","id","fullWidth","label","placeholder","required","errorMessage","value","disabled","type","componentType","ComponentFormType","INPUT_TEXT","autoFocus","autoComplete","validate","pattern","message","options","status","INPUT_DROPDOWN","departement","MemoizedUserFilter","React","memo","dispatch","useAppDispatch","location","useLocation","query","URLSearchParams","search","page","parseInt","get","selectInputOptions","useAppSelector","state","components","defaultValues","JSON","parse","stringify","form","useForm","async","loading","list","length","getSelectInputOptions","SelectInputDialogType","DEPARTEMENT","register","formState","handleSubmit","control","errors","jsxRuntimeExports","jsxs","Box","component","sx","mb","display","gridTemplateColumns","sm","gap","noValidate","onSubmit","data","getUsers","departementId","toString","children","Object","keys","map","field","_getField","_registerField","jsx","SelectForm","registerField","error","helperText","style","marginLeft","width","marginBottom","marginTop","backgroundColorLabel","TextField","mt","margin","_b","_a","LoadingButton","variant","size","Typography","gutterBottom","prevProps","nextProps"],"mappings":"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"}